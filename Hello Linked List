#include <iostream>
#include<cstdlib> 
using namespace std; 
class Node
{
    friend class LinkedList ;
private :
 
    int      value ;
    Node     *pNext;
 
public :
    Node () : pNext (NULL) {}
 
    Node (int val) :value (val) , pNext (NULL) {}
 
    Node (int val,Node *next) : value (val) , pNext (next) {}
};
 
 
class LinkedList
{
private:
    Node * pHead ;
    Node * pTail ;
 
public :
    LinkedList() ;
    LinkedList(int val) ;
    ~LinkedList() ;
 
    void TailAppend(int val);
    void HeadAppend(int val);
    void Clear();
    void Print();
    void BubbleSortList();
    void Remove(int val);
    void reverse();
};
 
 
LinkedList::LinkedList ()
{
	pHead=NULL;
    // Todo
    // Init linked list with empty node
}
 
LinkedList::LinkedList(int val)
{
	pHead->value=val;
	pHead->pNext=NULL;
    // Todo
    // Init linked list with one node whose value is val
}
 
LinkedList::~LinkedList()
{
	while(pHead!=NULL){
		Node *current=pHead;
		pHead=pHead->pNext;
		delete current;
		current=0;
	}
    // Todo
    // deconstruct linked list
}
void LinkedList::TailAppend(int val)
{
	Node *newNode=new Node(val);
	if(pHead==0){
		pHead=newNode;
		return;
	}
	Node *current=pHead;
	while(current->pNext!=0){
		current=current->pNext;
	}
	current->pNext=newNode;
    // Todo
    // append a node at tail whose value is val
}
 
void LinkedList::HeadAppend(int val)
{
	Node *newNode=new Node(val); 
	newNode->pNext=pHead;
	pHead=newNode;
    // Todo
    // append a node at head whose value is val
}
 
 
void LinkedList::Remove(int val)
{
	Node *current=pHead;
	Node *previous=0;
	while(current!=0&&current->value!=val){
		previous=current;
		current=current->pNext;
	}
	if(current==pHead){
		pHead=current->pNext;
		delete current;
		current=0;
	}else{
		previous->pNext=current->pNext;
		delete current;
		current=0;
	}
    // Todo
    // remove node whose value is val, if there are multiple node
    // with value equals val, remove the first one.
}
 
void LinkedList::Clear()
{
	while(pHead!=NULL){
		Node *current=pHead;
		pHead=pHead->pNext;
		delete current;
		current=0;
	}
    // Todo
    // Reomve all nodes at linked list
}
 
void LinkedList::Print()
{
    Node *p = pHead ;
    if (pHead == NULL)
    {
        cout << "This list is empty"<<endl ;
        return ;
    }
    cout << "LinkedList : ";
 
    while (p!= NULL)
    {
        cout <<p->value << " " ;
        p = p->pNext ;
    }
    cout << endl ;
 
}
 
 
void LinkedList::BubbleSortList()
{
	Node *tail=pHead;
	int size=0;
	while(tail!=0){
		tail=tail->pNext;
		size++;
	}
	for(int i=size;i>0;i--){
		Node *current=pHead;
		Node *previous=pHead;
		Node *temp=pHead;
		for(int j=0;j<i-1&&current->pNext!=NULL;j++){
			if(current->value>current->pNext->value){
				temp=current->pNext;
				current->pNext=temp->pNext;
				temp->pNext=current;
				if(current==pHead){
					pHead=temp;
					previous=temp;
				}else{
					previous->pNext=temp;
					previous=previous->pNext;
				}
			}else{
				current=current->pNext;
				if(j!=0) previous=previous->pNext;
			}
		}
	}
    // Todo
    // Sort linked list in increasing order
}

/*int main()
{
    LinkedList list;
    for (int i = 0 ; i < 10 ; i++)
    {
        int n = rand() %100 ;
        list.TailAppend(n) ;
    }
    cout << "Before Sort : "<< endl;
    list.Print();
    cout << endl <<"After Sort : "<<endl;
    list.BubbleSortList() ;
    list.Print();
 
    cout <<endl ;
 
    LinkedList list2;
    for (int i = 0; i< 10 ;i++)
    {
        list2.HeadAppend(i) ;
    }
    list2.Print();
    list2.Remove(1) ;
    list2.Print();
    list2.Remove(3) ;
    list2.Print();
    list2.Remove(5) ;
    list2.Print();
    list2.Remove(9) ;
    list2.Print();
    list2.Remove(7) ;
 
}
*/
